/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import dictionary.Dictionary;
import dictionary.DictionaryManagement;
import dictionary.Word;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Admin
 */
public class DictionaryApplication extends javax.swing.JFrame {

    /**
     * Creates new form DictionaryApplication
     */
    DefaultListModel<String> listModel ;
    public DictionaryApplication() {
        initComponents();
        runApplication();
    }
    public void runApplication(){
         Insert r = new Insert();
         r.insertFile();
         listModel = r.listModeltaget ;
         jList1.setModel(listModel) ;
    }
     // tìm nghĩa và  hiển thi lên jpanel
     public void Look(String taget){
           //String taget = jTextField1.getText();
         DictionaryManagement d = new DictionaryManagement();
         String explain = d.dictionaryLookup(taget);
          jTextPane1.setText(explain); 
     }
     // tìm nghĩa và tự hiển thi lên jpanel
     public void change(){
          String taget = jTextField1.getText();
          DictionaryManagement d = new DictionaryManagement();
          String explain = d.dictionaryLookup(taget);
          jTextPane1.setText(explain); 
          jTextField1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
               change();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
               change();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
              change();
            }
             public void change() {
                            
                      if(" ".equals(explain)){
                      jTextPane1.setText(jTextField1.getText());
                }
                else  jTextPane1.setText(explain);
             }
        
        });
     }
     //hàm xóa từ và hiển thị
     public void DeleteWordandVisibleList(String delete_word){
           DictionaryManagement d = new DictionaryManagement();
           d.deleteWord(delete_word);
           for (Word arrWord : Dictionary.arrWord) {
            listModel.addElement(arrWord.getWord_target());
           }
           //change() dùng để thay đổi hiển thị trên jTextpane
           change();
}
        // xem từ có trong từ điển hay không
     public boolean isWord(String w){
           for (int j = 0; j < Dictionary.arrWord.size(); j++) {
                if (w.equalsIgnoreCase(Dictionary.arrWord.get(j).getWord_target())) {
                          return true ;
                }
            }
           return false;
     }
      // Sửa từ và hiển thị lên
     public void RepairWord(String oldw , String neww , String newexplain){
       DictionaryManagement d = new DictionaryManagement();
       d.repairWord(oldw,neww,newexplain);
      for (Word arrWord : Dictionary.arrWord) {
            listModel.addElement(arrWord.getWord_target());
        }
       change();
     }
     // thêm và hiển thị
     public void AddWordandViable(String E , String TV){
           DictionaryManagement d = new DictionaryManagement();
           d.addWord(E , TV);
           for (Word arrWord : Dictionary.arrWord) {
            listModel.addElement(arrWord.getWord_target());
        }
       change();
     }
     //
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        Delete = new javax.swing.JMenuItem();
        Repair = new javax.swing.JMenuItem();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jbnVoice = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Close = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        DeleteWord = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        RepairWord = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        AddWord = new javax.swing.JMenuItem();

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Delete);

        Repair.setText("Repair");
        Repair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RepairActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Repair);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DICTIONARY");
        setLocationByPlatform(true);
        setResizable(false);

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTextField1.setForeground(new java.awt.Color(255, 0, 51));
        jTextField1.setText("Search....");
        jTextField1.setSelectionColor(new java.awt.Color(255, 0, 51));
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jTextPane1.setFocusable(false);
        jScrollPane2.setViewportView(jTextPane1);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-search-30.png"))); // NOI18N
        jLabel2.setLabelFor(jTextField1);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/psyduck.png"))); // NOI18N

        jbnVoice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/volume-up-interface-symbol.png"))); // NOI18N
        jbnVoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbnVoiceActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/big-dictionary (1).png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbnVoice, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbnVoice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addGap(7, 7, 7)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDesktopPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(new java.awt.Color(0, 204, 204));

        jMenu1.setText("File");

        Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-delete-15.png"))); // NOI18N
        Close.setText("Close");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });
        jMenu1.add(Close);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Menu");

        DeleteWord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-remove-15.png"))); // NOI18N
        DeleteWord.setText("Delete Word");
        DeleteWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteWordActionPerformed(evt);
            }
        });
        jMenu2.add(DeleteWord);
        jMenu2.add(jSeparator1);

        RepairWord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-pencil-15.png"))); // NOI18N
        RepairWord.setText("Repair Word");
        RepairWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RepairWordActionPerformed(evt);
            }
        });
        jMenu2.add(RepairWord);
        jMenu2.add(jSeparator2);

        AddWord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-add-15.png"))); // NOI18N
        AddWord.setText("Add Word");
        AddWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddWordActionPerformed(evt);
            }
        });
        jMenu2.add(AddWord);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteWordActionPerformed
         InternalFDelete d = new InternalFDelete();
         jDesktopPane1.add(d);
         d.show();
         d.jbnDelete.addActionListener(new ActionListener() {
             @Override
      public void actionPerformed(ActionEvent e) {
          String delete_word = d.jtfDelele.getText();  
          int comfirm = JOptionPane.showConfirmDialog(
                jDesktopPane1,"Bạn có muốn xóa từ ?","DELETE" ,JOptionPane.YES_NO_OPTION);
          if(comfirm == JOptionPane.YES_OPTION){
            boolean is =  isWord(delete_word);
            if(is == false){
                 JOptionPane.showMessageDialog(jDesktopPane1, "Không tìm thấy từ !",
                  "Delete", JOptionPane.PLAIN_MESSAGE);
            }
            else{
                    DeleteWordandVisibleList(delete_word );
                  /* listModel.removeElement(delete_word);
                   jList1.setModel(listModel);*/
                 if(jTextField1.getText().equals("Search....") ){ 
                   listModel.removeElement(delete_word);
            
                   }
                else{
                          listModel.removeElement(delete_word);
                          Seacher s = new Seacher();
                            s.search(jTextField1.getText());
                          listModel = s.listModelsearch ;
                       }
             jList1.setModel(listModel);
            JOptionPane.showMessageDialog(jDesktopPane1, "Xóa thành công !",
                  "Delete", JOptionPane.PLAIN_MESSAGE);
            DictionaryManagement d = new DictionaryManagement();
            File a = new File("dictionaries.txt") ;
            d.dictionaryExportToFile(a, Dictionary.arrWord);
            
                }
            }
         }
         });                                 

    }//GEN-LAST:event_DeleteWordActionPerformed

    private void AddWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddWordActionPerformed
         InternalFAdd d = new InternalFAdd();
         jDesktopPane1.add(d);
         d.show();
         d.jbnAddword.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
                String English = d.jtfAddEnglish.getText();
                String TV = d.jtfAddTV.getText(); 
                 int comfirm = JOptionPane.showConfirmDialog(
                    jDesktopPane1,"Bạn có muốn thêm từ ?","ADD WORD" ,JOptionPane.YES_NO_OPTION);
          if(comfirm == JOptionPane.YES_OPTION){
            boolean is =  isWord(English);
            if(is == true){
                 JOptionPane.showMessageDialog(jDesktopPane1, "Từ đã có trong từ điển!",
                  "Delete", JOptionPane.PLAIN_MESSAGE);
            }
            else{
                     AddWordandViable(English, TV);
                      DictionaryManagement dc = new DictionaryManagement();
                        File a = new File("dictionaries.txt") ;
                        dc.dictionaryExportToFile(a, Dictionary.arrWord);
                         JOptionPane.showMessageDialog(jDesktopPane1, "Thêm từ thành công !",
                               "Add", JOptionPane.PLAIN_MESSAGE);
            }
             }
             }
         });
    }//GEN-LAST:event_AddWordActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        Seacher s = new Seacher();
        s.search(jTextField1.getText());
        listModel = s.listModelsearch ;
        jList1.setModel(listModel);
         for(int i=0 ; i< listModel.getSize() ; i++){
              if(jTextField1.getText().equals(listModel.get(i) ) ){
                      jList1.setSelectedIndex(i);
                 }
        }
          change();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        String taget = jList1.getSelectedValue();
        Look(taget);
        if(SwingUtilities.isRightMouseButton(evt) &&
            jList1.locationToIndex(evt.getPoint() ) == jList1.getSelectedIndex()  ){

            jPopupMenu1.show( jList1 , evt.getX() , evt.getY() );

        }
    }//GEN-LAST:event_jList1MouseClicked

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here: 
     int comfirm = JOptionPane.showConfirmDialog(
                jDesktopPane1,"Bạn có muốn xóa từ ?","DELETE" ,JOptionPane.YES_NO_OPTION);
     if(comfirm == JOptionPane.YES_OPTION){
          String delete_word = jList1.getSelectedValue() ;
    
       DeleteWordandVisibleList(delete_word );
       File a = new File("dictionaries.txt") ;
       DictionaryManagement d = new DictionaryManagement();
       d.dictionaryExportToFile(a, Dictionary.arrWord);
       int selectedIndex = jList1.getSelectedIndex();
        if (selectedIndex != -1) {
        if(jTextField1.getText().equals("Search....") ){ 
            listModel.remove(selectedIndex);
            
        }
        else{
            listModel.remove(selectedIndex);
            Seacher s = new Seacher();
              s.search(jTextField1.getText());
             listModel = s.listModelsearch ;
        }
       }
        jList1.setModel(listModel);
        JOptionPane.showMessageDialog(jDesktopPane1, "Xóa thành công !",
                  "Delete", JOptionPane.PLAIN_MESSAGE);
        
     }
    }//GEN-LAST:event_DeleteActionPerformed

    private void RepairWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RepairWordActionPerformed
          InternalFRepair d = new InternalFRepair();
         jDesktopPane1.add(d);
         d.show();
         d.jbnRepair.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
                  int comfirm = JOptionPane.showConfirmDialog(
                jDesktopPane1,"Bạn có muốn sửa từ ?","REPAIR" ,JOptionPane.YES_NO_OPTION); 
              if(comfirm == JOptionPane.YES_OPTION){
                String old_word = d.jtFoldword.getText();
                String new_word = d.jtfnewword.getText();
               String new_explain = d.jtfnewexplain.getText();
                boolean is = isWord(old_word);
                 if(is == false){
                 JOptionPane.showMessageDialog(jDesktopPane1, "Không tìm thấy từ !",
                  "repair", JOptionPane.PLAIN_MESSAGE);
                  }
                  else{
                     if(new_word.equals("")){
                         if(new_explain.equals("")){
                           JOptionPane.showMessageDialog(jDesktopPane1, "Bạn cần nhập thay đổi!",
                            "repair", JOptionPane.OK_OPTION);
                         }
                         else{
                                  
                                   RepairWord(old_word, old_word, new_explain);
                              JOptionPane.showMessageDialog(jDesktopPane1, "Sửa từ thành công !",
                               "repair", JOptionPane.PLAIN_MESSAGE);
                              }
                     }
                    else{
                           if(new_explain.equals("")){
                                DictionaryManagement dc = new DictionaryManagement();
                                 new_explain = dc.dictionaryLookup(old_word);
                               RepairWord(old_word, new_word, new_explain);
                            JOptionPane.showMessageDialog(jDesktopPane1, "Sửa từ thành công !",
                             "repair", JOptionPane.PLAIN_MESSAGE);
                              }
                             else{
                                   RepairWord(old_word, new_word, new_explain);
                                JOptionPane.showMessageDialog(jDesktopPane1, "Sửa từ thành công !",
                                 "repair", JOptionPane.PLAIN_MESSAGE);
                              }
                     }// hiển thị và lưu        
                               if(jTextField1.getText().equals("Search....") ){
                               for(int i=0 ; i< listModel.getSize() ; i++){
                                      if(old_word.equals(listModel.get(i) ) ){
                                          listModel.setElementAt(new_word,i ); 
                                     } 
                                }
                                }
                                 else{
                                  for(int i=0 ; i< listModel.getSize() ; i++){
                                    if(old_word.equals(listModel.get(i) ) ){
                                         listModel.setElementAt(new_word,i );
                                         }
                                   }
                                   Seacher s = new Seacher();
                                 s.search(jTextField1.getText());
                                   listModel = s.listModelsearch ;
                               }
                               jList1.setModel(listModel);
                              DictionaryManagement dc = new DictionaryManagement();
                              File a = new File("dictionaries.txt") ;
                             dc.dictionaryExportToFile(a, Dictionary.arrWord);    
                     
                 }
                
           
             }
             }
         });
       
      
    }//GEN-LAST:event_RepairWordActionPerformed

    private void RepairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RepairActionPerformed
        String old_word = jList1.getSelectedValue();
         String new_word = null;
         String explain = null;
         int cf = JOptionPane.showConfirmDialog(jDesktopPane1,
                 "Bạn muốn thay phần English?","Repair",JOptionPane.INFORMATION_MESSAGE,
                     JOptionPane.YES_NO_CANCEL_OPTION);
         if(cf == JOptionPane.YES_OPTION){
             new_word = JOptionPane.showInputDialog(jDesktopPane1,
                     "Nhập từ mới :","Repair",JOptionPane.NO_OPTION);
              int confirm = JOptionPane.showConfirmDialog(jDesktopPane1,
                 "Bạn muốn thay đổi nghĩa của từ?","Repair",JOptionPane.INFORMATION_MESSAGE,
                     JOptionPane.YES_NO_CANCEL_OPTION);
              if(confirm == JOptionPane.YES_OPTION){
                   explain = JOptionPane.showInputDialog(jDesktopPane1,
                     "Nhập giải nghĩa :","Repair",JOptionPane.NO_OPTION);
               }
               if(confirm == JOptionPane.NO_OPTION){
                  DictionaryManagement dc = new DictionaryManagement();
                   explain = dc.dictionaryLookup(old_word);
             }
              if(confirm == JOptionPane.CANCEL_OPTION){
                   DictionaryManagement dc = new DictionaryManagement();
                   explain = dc.dictionaryLookup(old_word);
                   return;
              } 
              if(confirm == JOptionPane.CLOSED_OPTION){
                  
                  DictionaryManagement dc = new DictionaryManagement();
                  explain = dc.dictionaryLookup(old_word);
                  return ;}
         }
         if(cf == JOptionPane.NO_OPTION){
                    new_word = old_word ;
                
                    int confirm = JOptionPane.showConfirmDialog(jDesktopPane1,
                 "Bạn muốn thay đổi nghĩa của từ?","Repair",JOptionPane.INFORMATION_MESSAGE,
                     JOptionPane.YES_NO_CANCEL_OPTION);
          if(confirm == JOptionPane.YES_OPTION){
             explain = JOptionPane.showInputDialog(jDesktopPane1,
                     "Nhập giải nghĩa :","Repair",JOptionPane.NO_OPTION);
             
         }
         if(confirm == JOptionPane.NO_OPTION){
                  return ;
         }
         if(confirm == JOptionPane.CANCEL_OPTION){
             DictionaryManagement dc = new DictionaryManagement();
             explain = dc.dictionaryLookup(old_word);
             return ;}
           if(confirm == JOptionPane.CLOSED_OPTION){
                      DictionaryManagement dc = new DictionaryManagement();
                   explain = dc.dictionaryLookup(old_word);
                   return ;
           }
             }
         
         if(cf == JOptionPane.CANCEL_OPTION){return ;}
         if(cf == JOptionPane.CLOSED_OPTION){return ;}
          RepairWord(old_word , new_word , explain) ;
            int selectedIndex = jList1.getSelectedIndex();
          if (selectedIndex != -1) {
              if(jTextField1.getText().equals("Search....") ){
               for(int i=0 ; i< listModel.getSize() ; i++){
                       if(old_word.equals(listModel.get(i) ) ){
                            listModel.setElementAt(new_word,i );
                       }
               }
               }
              else{
                       for(int i=0 ; i< listModel.getSize() ; i++){
                            if(old_word.equals(listModel.get(i) ) ){
                                 listModel.setElementAt(new_word,i );
                                  }
                         }
                       Seacher s = new Seacher();
                       s.search(jTextField1.getText());
                        listModel = s.listModelsearch ;
               }
          }
           jList1.setModel(listModel);
        DictionaryManagement dc = new DictionaryManagement();
         File a = new File("dictionaries.txt") ;
         dc.dictionaryExportToFile(a, Dictionary.arrWord);
         JOptionPane.showMessageDialog(jDesktopPane1, "Sửa từ thành công !",
                            "repair", JOptionPane.PLAIN_MESSAGE);
                       
    }//GEN-LAST:event_RepairActionPerformed

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
        // TODO add your handling code here:
          if(jTextField1.getText().equals("Search....")){
                 jTextField1.setText("");
            }
    }//GEN-LAST:event_jTextField1FocusGained

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
        if(jTextField1.getText().equals("")){
               jTextField1.setText("Search....");
           }
    }//GEN-LAST:event_jTextField1FocusLost

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
         System.exit(0);
    }//GEN-LAST:event_CloseActionPerformed

    private void jbnVoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbnVoiceActionPerformed
        // TODO add your handling code here:
         if(jList1.getSelectedIndex() != -1){
          String taget = jList1.getSelectedValue();
          Voice v = new Voice("kevin16");
          v.say(taget);
        }
        else return ;
    }//GEN-LAST:event_jbnVoiceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DictionaryApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DictionaryApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DictionaryApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DictionaryApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DictionaryApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddWord;
    private javax.swing.JMenuItem Close;
    private javax.swing.JMenuItem Delete;
    private javax.swing.JMenuItem DeleteWord;
    private javax.swing.JMenuItem Repair;
    private javax.swing.JMenuItem RepairWord;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    protected javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JButton jbnVoice;
    // End of variables declaration//GEN-END:variables
}
